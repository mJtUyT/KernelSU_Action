name: Build OnePlus11 C15 KernelSU
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
    - name: Set swap to 15G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%y%m%d")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Download Clang-aosp
      if: env.USE_CUSTOM_CLANG != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-aosp
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.CLANG_BRANCH }}/clang-${{ env.CLANG_VERSION }}.tar.gz
        tar -C clang-aosp/ -zxvf clang-${{ env.CLANG_VERSION }}.tar.gz

    - name: Download Custom-Clang
      if: env.USE_CUSTOM_CLANG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.CUSTOM_CLANG_SOURCE }} =~ git ]]; then
            if [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.gz' ]]; then
                wget -O clang.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
                mkdir clang-aosp
                tar -C clang-aosp/ -zxvf clang.tar.gz
            else
                git clone ${{ env.CUSTOM_CLANG_SOURCE }} -b ${{ env.CUSTOM_CLANG_BRANCH }} clang-aosp --depth=1
            fi        
        else
            wget -O clang.zip ${{ env.CUSTOM_CLANG_SOURCE }}
            mkdir clang-aosp
            unzip clang.zip -d clang-aosp/
        fi

    - name: Download Gcc-aosp
      if: env.USE_CUSTOM_GCC_64 != 'true' || env.USE_CUSTOM_GCC_32 != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ ${{ env.ENABLE_GCC_ARM64 }} = true ]; then
            mkdir gcc-64
            wget -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-64/ -zxvf gcc-aarch64.tar.gz
            echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android-" >> $GITHUB_ENV
        fi

        if [ ${{ env.ENABLE_GCC_ARM32 }} = true ]; then
            mkdir gcc-32
            wget -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-32/ -zxvf gcc-arm.tar.gz
            echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-" >> $GITHUB_ENV
        fi

    - name: Download Custom-Gcc
      if: env.USE_CUSTOM_GCC_64 == 'true' || env.USE_CUSTOM_GCC_32 == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ ${{ env.USE_CUSTOM_GCC_64 }} = true ]; then
          if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-64.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
                mkdir gcc-64
                tar -C gcc-64/ -zxvf gcc-64.tar.gz
              else
                git clone ${{ env.CUSTOM_GCC_64_SOURCE }} -b ${{ env.CUSTOM_GCC_64_BRANCH }} gcc-64 --depth=1
              fi
          else
              wget -O gcc-64.zip ${{ env.CUSTOM_GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
          fi
          echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/${{ env.CUSTOM_GCC_64_BIN }}" >> $GITHUB_ENV
        fi

        if [ ${{ env.USE_CUSTOM_GCC_32 }} = true ]; then
          if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-32.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
                mkdir gcc-32
                tar -C gcc-32/ -zxvf gcc-32.tar.gz
              else
                git clone ${{ env.CUSTOM_GCC_32_SOURCE }} -b ${{ env.CUSTOM_GCC_32_BRANCH }} gcc-32 --depth=1
              fi
          else
            wget -O gcc-32.zip ${{ env.CUSTOM_GCC_32_SOURCE }}
            mkdir gcc-32
            unzip gcc-32.zip -d gcc-32/
          fi
          echo "GCC_32=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/${{ env.CUSTOM_GCC_32_BIN }}" >> $GITHUB_ENV
        fi
    - name: Download kernel source
      run: |
        git clone https://github.com/OnePlusOSS/android_kernel_modules_and_devicetree_oneplus_sm8550 -b oneplus/sm8550_v_15.0.0_oneplus11 kernel_workspace --depth=1
        cd $GITHUB_WORKSPACE/kernel_workspace
        cd kernel_platform
        git clone https://github.com/OnePlusOSS/android_kernel_oneplus_sm8550 -b oneplus/sm8550_v_15.0.0_oneplus11 common --depth=1
        cd common/scripts
        sed -i 's/ -dirty//g' setlocalversion
        sed -i 's/ -g / -android13-8-g /g' setlocalversion
    - name: Download Clang-aosp
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-aosp
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master-kernel-build-2022/clang-r450784e.tar.gz
        tar -C clang-aosp/ -zxvf clang-r450784e.tar.gz
    - name: Setup KernelSU
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common
        rm -rf KernelSU drivers/kernelsu
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
        KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
        echo "UPLOADNAME=-KSU_$KSU_VERSION" >> $GITHUB_ENV
    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        KERNEL_DIR=./kernel_platform/common
        OUT_DIR=../../out
        DEFCONFIG="gki_defconfig vendor/kalama_GKI.config"
        LTO=thin
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export ARCH=arm64
        export SUBARCH=arm64
        export HEADER_ARCH=arm64
        TOOL_ARGS+=("ARCH=${ARCH}" "SUBARCH=${SUBARCH}" "HEADER_ARCH=${HEADER_ARCH}")
        CC=clang CXX=clang++ && TOOL_ARGS+=("CC=${CC}"  "CXX=${CXX}")
        LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf OBJSIZE=llvm-size STRIP=llvm-strip && TOOL_ARGS+=("LD=${LD}" "AR=${AR}" "NM=${NM}" "OBJCOPY=${OBJCOPY}" "OBJDUMP=${OBJDUMP}" "STRIP=${STRIP}")
        LLVM=1 LLVM_IAS=1 && TOOL_ARGS+=("LLVM=${LLVM}" "LLVM_IAS=${LLVM_IAS}")
        cd ${KERNEL_DIR}
        THREAD=14
        make -j"$THREAD" "${TOOL_ARGS[@]}" O=${OUT_DIR}  ${DEFCONFIG}
        scripts/config --file ${OUT_DIR}/.config -e LTO_CLANG -d LTO_NONE -e LTO_CLANG_THIN -d LTO_CLANG_FULL -e THINLTO
        THREAD=$(($(nproc --all) - 1))
        make -j"$THREAD" O=${OUT_DIR} "${TOOL_ARGS[@]}"
    - name: Make Anykernel3
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1 AnyKernel3
        cp out/arch/arm64/boot/Image AnyKernel3/
    - name: Upload Image
      uses: actions/upload-artifact@v4
      with:
        name: Image
        path: kernel_workspace/out/arch/arm64/boot/Image

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: OnePlus11 C14-AnyKernel3${{ env.UPLOADNAME }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*
